// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  AUTHOR
  ADMIN
  READER
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  role      UserRole  @default(READER)
  posts     Post[]
  profile   Profile?
  comments  Comment[]
  likes     Like[]
}

model Profile {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  photoLink String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Post {
  id         String    @id @default(uuid())
  title      String
  body       String
  author     User      @relation(fields: [authorId], references: [id])
  createdAt  DateTime  @default(now())
  modifiedAt DateTime  @default(now())
  photoLink  String
  authorId   String
  tags       Tag[]
  comments   Comment[]
  likes      Like[]
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  authorId  String
  createdAt DateTime @default(now())
}

model Like {
  id       String @id @default(uuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
}
